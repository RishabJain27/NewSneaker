{"version":3,"sources":["shoe.module.css","Shoe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Shoe","names","image_url","site","category","className","style","shoe","onClick","console","log","window","open","click","name","image","src","alt","width","height","App","useState","shoes","setShoes","useEffect","shoesDB","a","fetch","response","json","data","map","key","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kGACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,IAAM,kBAAkB,KAAO,qB,qNCkB5DC,EAhBF,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,UAAWC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,SAOnC,OACI,yBAAKC,UAAWC,IAAMC,KAAMC,QAAS,kBANzC,SAAeL,GACXM,QAAQC,IAAIP,EAAKA,MACjBQ,OAAOC,KAAKT,EAAKA,MAI0BU,CAAM,CAACV,WAC9C,uBAAGE,UAAWC,IAAMQ,MAApB,IAA2B,+BAAKb,EAAL,KAA3B,KACA,yBAAKI,UAAWC,IAAMS,MAAOC,IAAKd,EAAWe,IAAI,GAAGC,MAAM,MAAMC,OAAO,QACvE,uBAAGd,UAAWC,IAAMQ,MAApB,IAA2B,+BAAKV,EAAL,KAA3B,OCiDGgB,EAzDH,WAAO,IAAD,EAEUC,mBAAS,IAFnB,mBAETC,EAFS,KAEFC,EAFE,KAKhBC,qBAAW,WACTC,MACA,IAEF,IAAMA,EAAO,uCAAG,8BAAAC,EAAA,sEACSC,MAAM,4CADf,cACRC,EADQ,gBAEKA,EAASC,OAFd,OAERC,EAFQ,OAGdP,EAASO,GAHK,2CAAH,qDA6Bb,OACE,yBAAKzB,UAAU,OACb,wBAAIA,UAAU,MAAd,wBACA,yBAAKA,UAAU,SACZiB,EAAMS,KAAI,SAAAxB,GAAI,OACb,kBAAC,EAAD,CACEyB,IAAOzB,EAAKL,UACZD,MAAOM,EAAKO,KACZZ,UAAaK,EAAKL,UAClBC,KAAQI,EAAKJ,KACbC,SAAYG,EAAKH,iBC1CT6B,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.7f299143.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"shoe\":\"shoe_shoe__2uOBt\",\"img\":\"shoe_img__1BNRS\",\"name\":\"shoe_name__Ul3iJ\"};","import React from 'react';\nimport style from './shoe.module.css';\n\nconst Shoe = ({names, image_url, site, category}) => {\n\n    function click(site) {\n        console.log(site.site);\n        window.open(site.site);\n    }\n\n    return(\n        <div className={style.shoe} onClick={() => click({site})}>\n            <p className={style.name}> <b> {names} </b> </p>\n            <img className={style.image} src={image_url} alt=\"\" width=\"200\" height=\"200\"/>\n            <p className={style.name}> <b> {category} </b> </p>\n        </div>\n    );\n}\n\nexport default Shoe;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Shoe from \"./Shoe\"\n\n\n\nconst App = () => {\n  \n  const [shoes, setShoes] = useState([]);\n\n\n  useEffect( () => {\n    shoesDB();\n  },[]);\n\n  const shoesDB = async () => {\n    const response = await fetch(`https://sneakers-api.herokuapp.com/shoes`);\n    const data = await response.json();\n    setShoes(data);\n  }\n\n  /* IGNORE\n  const nikeShoes = async () => {\n    const response = await fetch(`http://localhost:3001/nikeShoes`);\n    const data = await response.json();\n    setNike(data);\n    //console.log(data);\n  }\n\n  const adidasShoes = async () => {\n    const response = await fetch(`http://localhost:3001/adidasShoes`);\n    const data = await response.json();\n    setAdidas(data);\n    //console.log(data);\n  }\n\n  const underarmourShoes = async () => {\n    const response = await fetch(`http://localhost:3001/underarmourShoes`);\n    const data = await response.json();\n    setUnderarmour(data);\n    //console.log(data);\n  } \n  */\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"h1\">Newly Released Shoes</h1>\n      <div className=\"shoes\">             \n        {shoes.map(shoe => (\n          <Shoe\n            key = {shoe.image_url}\n            names={shoe.name}\n            image_url = {shoe.image_url} \n            site = {shoe.site}\n            category = {shoe.category}\n          />\n        ))}\n      </div>\n    </div>\n  );\n\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}